# script for generating statistics per species.
# Hans Roelofsen, WEnR, 13 feb 2019

import os
import pandas as pd

from nw import utils
from nw import export_shape

# get ndff data and filter to selected species and selected periods
ndff = utils.get_ndff_full()

# get all species information
sp_info = utils.get_sp_info()

# Constraints on NDFF observations
hok = 'kmhok'  # either uurhok, kmhok. TODO: Extent to duplohok, quartohok
min_area = {'kmhok':2500000, 'uurhok':1e9}[hok] # 2500000 for km hokken! 1e9 for uurhokken
nulsoort = False # include nulsoorten: True or False
groep = 'vaatplant'  # one of following['broedvogel', 'dagvlinder', 'vaatplant', 'herpetofauna', 'all']
periode_1 = 'N2003-2012'  # start-end year inclusive!
periode_2 = 'N2013-2018'  # start-end year inclusive!
beheertype = 'all'
            # either one of: 'snl_vochtige_heide' 'snl_zwakgebufferd_ven', 'snl_zuur_ven_of_hoogveenven',  'snl_droge_heide',
                    # 'snl_zandverstuiving', 'snl_hoogveen, 'all'

sp_sel = set(sp_info[groep]['sp_nm']) & set(sp_info[beheertype]['sp_nm']) & set(sp_info['nulsoort'][nulsoort]['sp_nm'])

# Contraints on cells
heide_periode_in = 2012  # reference year for heide presence in cells, either 1900 or 2012
heide_treshold_in = 1  # % of cell in year constaining heide. 0 if all values are ok
oz_groep_in = utils.get_soortgroep_afkorting(groep)
oz05_treshold_in = 75  # drempelwaarde voor onderzoeksvolledigheid periode 1998-2007. 0 if all values are ok
oz18_treshold_in = 75  # drempelwaarde voor onderzoeksvolledigheid periode 2008-2018. 0 if all values are ok
plot_background = False  # Boolean, plot cells in output graph
beheertype_in_titel = True

# get requested cell type and narrow down
cells = utils.get_hok_gdf(hok_type=hok, oz_taxgroup=oz_groep_in, oz05_treshold=oz05_treshold_in,
                          oz18_treshold=oz18_treshold_in, heide_periode=heide_periode_in,
                          heide_treshold=heide_treshold_in)

# filter NDFF
ndff_sel = ndff.loc[(ndff['area'] < min_area) & (ndff['nl_name'].isin(sp_sel)), :]


ndff_p1 = ndff_sel.loc[ndff['year'].isin([j for j in range(int(periode_1[1:5]), int(periode_1[6:10])+1)]), :]
ndff_p2 = ndff_sel.loc[ndff['year'].isin([j for j in range(int(periode_2[1:5]), int(periode_2[6:10])+1)]), :]

# pivot table for each period
p1_piv = pd.DataFrame(pd.pivot_table(ndff_p1, values=hok, index='nl_name', aggfunc=lambda x: len(x.unique()))).rename(
         columns={'kmhok':'{0}_count_{1}'.format(hok, periode_1)})
p2_piv = pd.DataFrame(pd.pivot_table(ndff_p2, values=hok, index='nl_name', aggfunc=lambda x: len(x.unique()))).rename(
         columns={'kmhok':'{0}_count_{1}'.format(hok, periode_2)})

# merge and keep all species
merged = pd.merge(left=p1_piv, right=p2_piv, how='outer', right_index=True, left_index=True)
out_name = '{0}_count_{1}_{2}'.format(hok, beheertype, groep)
out_base_dir = r'd:\NW_out_data\b_per_tax\20190212'
merged.to_csv(os.path.join(out_base_dir, 'tabs', out_name + '.csv'), sep=',')
